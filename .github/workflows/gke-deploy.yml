name: Deploy to GKE (DISABLED)

# TEMPORARILY DISABLED - Migrating to GKE Autopilot
# This workflow is disabled while we transition from Standard GKE to Autopilot clusters
# Will be re-enabled after autopilot migration is complete
on:
  # workflow_run:
  #   workflows: ["Containerized CI/CD Pipeline"]
  #   types:
  #     - completed
  #   branches: [ main ]
  workflow_dispatch:  # Manual trigger only

permissions:
  contents: read
  id-token: write

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_ZONE: ${{ secrets.GKE_CLUSTER_ZONE }}
  DEPLOYMENT_NAME: quantumfpo
  REGISTRY: ghcr.io
  IMAGE_NAME: lxtececo/quantumfpo
  USE_GKE_GCLOUD_AUTH_PLUGIN: True

jobs:
  deploy:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    # Only run if the triggering workflow succeeded and on main branch
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Install GKE gcloud auth plugin
      run: |
        gcloud components install gke-gcloud-auth-plugin

    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

    - name: Verify cluster connection
      run: |
        kubectl cluster-info
        kubectl get nodes

    - name: Set image tag from triggering workflow
      run: |
        echo "IMAGE_TAG=${{ github.event.workflow_run.head_sha }}" >> $GITHUB_ENV
        echo "Deploying images with tag: ${{ github.event.workflow_run.head_sha }}"

    - name: Check and clean problematic webhooks
      run: |
        echo "=== Checking for problematic webhooks ==="
        kubectl get validatingwebhookconfigurations -o name || echo "No validating webhooks"
        kubectl get mutatingwebhookconfigurations -o name || echo "No mutating webhooks"
        
        # Check for GMP operator webhooks that might be causing issues
        if kubectl get validatingwebhookconfigurations | grep -q "gmp-operator"; then
          echo "Found GMP operator webhook, checking if it's functional..."
          kubectl describe validatingwebhookconfigurations | grep -A 10 -B 5 "gmp-operator" || echo "Could not describe webhook"
        fi
        
        # Check cluster health
        echo "=== Cluster Health Check ==="
        kubectl get componentstatuses || echo "Component status not available"
        kubectl get --raw='/readyz' || echo "Readiness check failed"

    - name: Deploy to GKE
      run: |
        # Replace image tags in Kubernetes manifests
        sed -i "s|FRONTEND_IMAGE|$REGISTRY/$IMAGE_NAME-frontend:$IMAGE_TAG|g" k8s/frontend-deployment.yaml
        sed -i "s|JAVA_BACKEND_IMAGE|$REGISTRY/$IMAGE_NAME-java-backend:$IMAGE_TAG|g" k8s/java-backend-deployment.yaml
        sed -i "s|PYTHON_BACKEND_IMAGE|$REGISTRY/$IMAGE_NAME-python-backend:$IMAGE_TAG|g" k8s/python-backend-deployment.yaml
        
        # Apply Kubernetes manifests (exclude files that require additional CRDs)
        kubectl apply -f k8s/00-namespace-config.yaml
        kubectl apply -f k8s/python-backend-deployment.yaml
        kubectl apply -f k8s/java-backend-deployment.yaml
        kubectl apply -f k8s/frontend-deployment.yaml
        kubectl apply -f k8s/hpa.yaml
        kubectl apply -f k8s/monitoring.yaml
        kubectl apply -f k8s/ingress.yaml
        
        echo "All Kubernetes manifests applied successfully"
        
        # Verify namespace exists and is ready
        echo "=== Verifying namespace ==="
        kubectl get namespace quantumfpo
        kubectl get all -n quantumfpo

    - name: Verify deployment
      run: |
        # Wait for deployments to be ready with timeout
        echo "Waiting for Python backend deployment..."
        kubectl rollout status deployment/quantumfpo-python-backend -n quantumfpo --timeout=300s
        
        echo "Waiting for Java backend deployment..."
        kubectl rollout status deployment/quantumfpo-java-backend -n quantumfpo --timeout=300s
        
        echo "=== Pre-Frontend Deployment Diagnostics ==="
        kubectl get pods -n quantumfpo -o wide
        kubectl get events -n quantumfpo --sort-by='.lastTimestamp' | tail -20
        
        echo "Waiting for Frontend deployment (longer timeout due to frontend complexity)..."
        if ! kubectl rollout status deployment/quantumfpo-frontend -n quantumfpo --timeout=600s; then
          echo "Frontend deployment failed or timed out. Running comprehensive diagnostics..."
          
          echo "=== Frontend Deployment Status ==="
          kubectl describe deployment quantumfpo-frontend -n quantumfpo
          
          echo "=== Frontend ReplicaSet Status ==="
          kubectl get rs -l app=quantumfpo-frontend -n quantumfpo -o wide
          kubectl describe rs -l app=quantumfpo-frontend -n quantumfpo
          
          echo "=== Frontend Pod Details ==="
          kubectl get pods -l app=quantumfpo-frontend -n quantumfpo -o wide
          
          echo "=== Frontend Pod Events ==="
          kubectl get events -n quantumfpo --field-selector reason=Failed --sort-by='.lastTimestamp' | tail -10
          kubectl get events -n quantumfpo --field-selector reason=FailedMount --sort-by='.lastTimestamp' | tail -10
          kubectl get events -n quantumfpo --field-selector reason=FailedScheduling --sort-by='.lastTimestamp' | tail -10
          
          echo "=== Frontend Pod Logs ==="
          for pod in $(kubectl get pods -l app=quantumfpo-frontend -n quantumfpo -o jsonpath='{.items[*].metadata.name}'); do
            echo "--- Logs for pod: $pod ---"
            kubectl logs $pod -n quantumfpo --tail=50 || echo "Could not get logs for $pod"
          done
          
          echo "=== Frontend Pod Descriptions ==="
          kubectl describe pods -l app=quantumfpo-frontend -n quantumfpo
          
          echo "=== Node Resources ==="
          kubectl top nodes || echo "Metrics server not available"
          kubectl describe nodes | grep -A 5 "Allocated resources:" || echo "Could not get resource allocation"
          
          exit 1
        fi
        
        # Get deployment status
        echo "=== Deployment Status ==="
        kubectl get deployments -n quantumfpo
        
        echo "=== Service Status ==="
        kubectl get services -n quantumfpo
        
        echo "=== Pod Status ==="
        kubectl get pods -n quantumfpo
        
        echo "=== Ingress Status ==="
        kubectl get ingress -n quantumfpo
        
        echo "=== HPA Status ==="
        kubectl get hpa -n quantumfpo

    - name: Run smoke tests
      run: |
        # Wait a bit for services to be ready
        echo "Waiting for services to be ready..."
        sleep 30
        
        # Get the external IP or LoadBalancer IP
        FRONTEND_IP=$(kubectl get service quantumfpo-frontend -n quantumfpo -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
        JAVA_IP=$(kubectl get service quantumfpo-java-backend -n quantumfpo -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
        PYTHON_IP=$(kubectl get service quantumfpo-python-backend -n quantumfpo -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
        
        echo "=== Service IPs ==="
        echo "Frontend IP: $FRONTEND_IP"
        echo "Java Backend IP: $JAVA_IP"  
        echo "Python Backend IP: $PYTHON_IP"
        
        # Test internal cluster connectivity using port-forwarding
        echo "=== Testing via port-forwarding ==="
        
        # Test Python backend health
        echo "Testing Python backend health..."
        timeout 30 kubectl port-forward service/quantumfpo-python-backend 8002:8002 -n quantumfpo &
        PF_PID_PYTHON=$!
        sleep 5
        curl -f http://localhost:8002/health || echo "Python backend health check failed"
        kill $PF_PID_PYTHON 2>/dev/null || true
        
        # Test Java backend health  
        echo "Testing Java backend health..."
        timeout 30 kubectl port-forward service/quantumfpo-java-backend 8080:8080 -n quantumfpo &
        PF_PID_JAVA=$!
        sleep 5
        curl -f http://localhost:8080/actuator/health || echo "Java backend health check failed"
        kill $PF_PID_JAVA 2>/dev/null || true
        
        # Test frontend health
        echo "Testing Frontend health..."
        timeout 30 kubectl port-forward service/quantumfpo-frontend 8000:80 -n quantumfpo &
        PF_PID_FRONTEND=$!
        sleep 5
        curl -f http://localhost:8000/health || echo "Frontend health check failed"
        kill $PF_PID_FRONTEND 2>/dev/null || true
        
        echo "=== Smoke tests completed ==="

    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "üöÄ Deployment to GKE successful!"
          echo "Application is now running on GKE cluster: $GKE_CLUSTER"
        else
          echo "‚ùå Deployment to GKE failed!"
        fi

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    
    steps:
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Install GKE gcloud auth plugin
      run: |
        gcloud components install gke-gcloud-auth-plugin

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

    - name: Rollback deployments
      run: |
        echo "Rolling back failed deployment..."
        kubectl rollout undo deployment/quantumfpo-frontend -n quantumfpo || true
        kubectl rollout undo deployment/quantumfpo-java-backend -n quantumfpo || true
        kubectl rollout undo deployment/quantumfpo-python-backend -n quantumfpo || true
        
        echo "Rollback initiated. Checking status..."
        kubectl get deployments -n quantumfpo
        kubectl describe deployments -n quantumfpo