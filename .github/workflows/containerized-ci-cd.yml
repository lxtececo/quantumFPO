name: Containerized CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'
  JAVA_VERSION: '21'
  NODE_VERSION: '20'

jobs:
  # Build and Test Individual Services
  test-and-build:
    name: Test & Build Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, java-backend, python-backend]
        include:
          - service: frontend
            dockerfile: ./frontend/Dockerfile
            context: ./frontend
            port: 3000
          - service: java-backend
            dockerfile: ./backend/Dockerfile
            context: ./backend
            port: 8080
          - service: python-backend
            dockerfile: ./backend/src/main/python/Dockerfile
            context: .
            port: 8002

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Java
      if: matrix.service == 'java-backend'
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Set up Maven
      if: matrix.service == 'java-backend'
      uses: stCarolas/setup-maven@v5
      with:
        maven-version: 3.9.6

    - name: Set up Node.js
      if: matrix.service == 'frontend'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Set up Python
      if: matrix.service == 'python-backend'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Run service-specific tests
      run: |
        case "${{ matrix.service }}" in
          frontend)
            cd frontend
            npm ci
            npm run lint || true
            npm run test:coverage
            ;;
          java-backend)
            cd backend
            mvn clean test -B
            mvn jacoco:report
            ;;
          python-backend)
            cd backend/src/main/python
            pip install -r requirements.txt
            pip install pytest pytest-cov flake8
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
            python -m pytest ../../test/python/ -v --cov=. --cov-report=xml -m "not integration"
            ;;
        esac

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Test Docker image
      run: |
        # Pull the built image
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ github.sha }}
        
        # Run container in background
        docker run -d --name test-${{ matrix.service }} \
          -p ${{ matrix.port }}:${{ matrix.port }} \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ github.sha }}
        
        # Wait for container to be ready
        sleep 30
        
        # Test health endpoint
        case "${{ matrix.service }}" in
          frontend)
            curl -f http://localhost:${{ matrix.port }}/health || exit 1
            ;;
          java-backend)
            curl -f http://localhost:${{ matrix.port }}/actuator/health || exit 1
            ;;
          python-backend)
            curl -f http://localhost:${{ matrix.port }}/health || exit 1
            ;;
        esac
        
        # Cleanup
        docker stop test-${{ matrix.service }}
        docker rm test-${{ matrix.service }}

    - name: Upload test coverage
      if: matrix.service != 'frontend'
      uses: codecov/codecov-action@v3
      with:
        file: |
          ./backend/target/site/jacoco/jacoco.xml
          ./backend/src/main/python/coverage.xml
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage

  # Integration Tests with Docker Compose
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test-and-build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Update docker-compose with built images
      run: |
        # Replace image references in docker-compose.yml
        sed -i "s|build:|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}|g" docker-compose.yml
        sed -i "s|context: ./frontend||g" docker-compose.yml
        sed -i "s|dockerfile: Dockerfile||g" docker-compose.yml
        
        sed -i "s|build:|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-java-backend:${{ github.sha }}|g" docker-compose.yml
        sed -i "s|context: ./backend||g" docker-compose.yml
        
        sed -i "s|build:|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-python-backend:${{ github.sha }}|g" docker-compose.yml
        sed -i "s|context: \.||g" docker-compose.yml

    - name: Start services with Docker Compose
      run: |
        docker compose up -d
        
        # Wait for services to be ready
        echo "Waiting for services to start..."
        sleep 60
        
        # Check service health
        docker compose ps
        
        # Wait for all services to be healthy
        timeout 120 bash -c 'until [ "$(docker compose ps --filter health=healthy --quiet | wc -l)" -eq "3" ]; do sleep 5; done'

    - name: Run integration tests
      run: |
        # Install test dependencies
        pip install pytest requests
        
        # Run integration tests against running containers
        cd backend
        python -m pytest src/test/python/test_integration_e2e.py -v -m "integration" \
          --tb=short
      env:
        PYTHONPATH: ${{ github.workspace }}/backend/src/main/python
        JAVA_API_URL: http://localhost:8080
        PYTHON_API_URL: http://localhost:8002
        FRONTEND_URL: http://localhost:3000

    - name: Collect service logs
      if: always()
      run: |
        mkdir -p logs
        docker compose logs frontend > logs/frontend.log
        docker compose logs java-backend > logs/java-backend.log  
        docker compose logs python-backend > logs/python-backend.log

    - name: Cleanup
      if: always()
      run: |
        docker compose down -v
        docker system prune -f

    - name: Upload service logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: service-logs
        path: logs/

  # Security Scanning
  security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: test-and-build
    strategy:
      matrix:
        service: [frontend, java-backend, python-backend]

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-${{ matrix.service }}.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-${{ matrix.service }}.sarif'

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Start services for performance testing
      run: |
        # Use the built images for performance testing
        docker run -d --name perf-python-backend \
          -p 8002:8002 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-python-backend:${{ github.sha }}
        
        docker run -d --name perf-java-backend \
          -p 8080:8080 \
          -e PYTHON_API_BASE_URL=http://localhost:8002 \
          --network host \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-java-backend:${{ github.sha }}
        
        # Wait for services to be ready
        sleep 45

    - name: Install performance testing tools
      run: |
        sudo apt-get update
        sudo apt-get install -y apache2-utils curl

    - name: Run performance tests
      run: |
        # Test Python API performance
        echo "Testing Python API performance..."
        ab -n 100 -c 10 http://localhost:8002/health
        
        # Test Java API performance
        echo "Testing Java API performance..."
        ab -n 100 -c 10 http://localhost:8080/actuator/health
        
        # Load test with sample data
        curl -X POST http://localhost:8002/api/optimize/classical \
          -H "Content-Type: application/json" \
          -d '{"stocks":["SIM_AAPL","SIM_GOOGL"],"var_percent":5.0}' || true

    - name: Cleanup performance test containers
      if: always()
      run: |
        docker stop perf-python-backend perf-java-backend || true
        docker rm perf-python-backend perf-java-backend || true

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/main' && needs.integration-tests.result == 'success'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "Frontend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}"
        echo "Java Backend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-java-backend:${{ github.sha }}"
        echo "Python Backend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-python-backend:${{ github.sha }}"
        
        # Here you would typically deploy to your staging environment
        # For example, update Kubernetes manifests, trigger deployment pipeline, etc.

    - name: Run staging smoke tests
      run: |
        echo "🧪 Running smoke tests on staging..."
        # Add your staging smoke tests here
        # curl -f https://staging.quantumfpo.com/health

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging, performance-tests]
    if: github.ref == 'refs/heads/main' && needs.deploy-staging.result == 'success'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        echo "Frontend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}"
        echo "Java Backend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-java-backend:${{ github.sha }}"
        echo "Python Backend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-python-backend:${{ github.sha }}"
        
        # Here you would deploy to production
        # Update production Kubernetes manifests, trigger blue-green deployment, etc.

    - name: Run production smoke tests
      run: |
        echo "🧪 Running smoke tests on production..."
        # Add your production smoke tests here
        # curl -f https://quantumfpo.com/health